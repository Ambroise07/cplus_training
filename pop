POUR L'INSTANT NOUS AVONS UTILISER LES TYPES DE DONNÉES QUI SONT INT FLOAT DOUBLE BOOL BOOLEAN(JAVA)
DANS CE CHAPITRE NOUS ALLONS DÉFINIR DE NOUVEAU TYPES QUI VONT PERMET DE REPRESENTER LES ENTITÉS PLUS COMPLEXES PAR EXEMPLE
ON POURA DEFINIR UN TYPE POINT QUI CONTIENDRA UN ABSCIXE ET UNE ORDONNÉ
A CET EFFET NOUS ALLONS APPRENDRE A CREER ET A UTILISER LES TYPES STRUCTURER
NOUS ALLONS ENSUITE DECOUVIRE COMMENT A PARTIR DE CES TYPES COMMENT CREER DES FONCTIONS PERMETTANTS DE MANIPULER CES NOUVEAUX TYPES
SYNTAXE
 STRUCT POINT{
     DOUBLE X,Y;
 }

 EXERCICE : Ecrire un code qui fixe déja les coordonnées du point a reespectivement à 3.2 et 6.4
la machine demande à l'utilisateur d'entrée les coordonnées du point b; la machine calcule le milieux des points a et b et affiche les résultats


-------------------------------------------------
#include <iostream>
using namespace std;
struct Emploiyer
{

    char name[50];
    char subname[50];
    float salaire;
    int age;

};
int main()
{   Emploiyer E1;
    cout << "Entrer votre nom " << endl;
    cin.get (E1.name, 50) ;
    cout << "Entrer votre prenom " << endl;
    cin >> E1.subname;
    cout << "Entrer votre Age " << endl;//getline(cin, variable name in case of struct it will be struct object.variable)
    cin >> E1.age;
    cout << "Enter votre salaire "<< endl;
    cin >> E1.salaire;
    cout << "-------------------------" << endl;

    cout << "Votre Nom est " << E1.name << endl;
    cout << "Votre Prenom est :" << E1.subname << endl;
    cout << "Votre age est :" << E1.age << endl;
    cout << "Votre salaire est :" << E1.salaire << endl;

}


------------------------------------------------------

E1 content 4 values who is name , subname, salaire, age


LA POO EST LUNE DES METHODES DE PROGRAMMATION REECENTS COURAMMENT UTILISER ÂR LES LANGUAGES DE PROGRAMMATIONS LES PLUS RÉPANDUS (C++, JAVA, C#)
CETTE METHODOLOGIE SUCCETTE A LA PROG IMPERATIVE EN LUI AJOUTANT LES NOTIONS D'OBJETS ET DE CLASSE.
LA POO UTILISE LA NOTION D'OBJETS QUI RASSEMBLE VARIABLES ET OPERATIONS(ATTRIBUTS ET METHODES )
LE TYPES D'UN OBJETS EST ALORS APPELÉS CLASSSE HERITAGES

POUR SUPPORTTER LE PRINCIPALES DE LA POO TOUS LES LANGUAGES SUPPORTANS POO ON TROIS POINTS EN COMMUN
-> L'ENCAPSULATION
-> L'HÉRITAGE
-> POLYMORPHISE

PRINCIPALES FONDENMENTALES DE LA POO
IL EXISTE TROIS CONCEPTS QUI DONNENT TOUS ÇA PUISSANCES À LA POO

-> Le concept de moderlisation à travers la notion de classe et d'instenciation de ces classes
-> Le concept d'action à travers la notion d'envoi de message et de methode à l'interrieur des objects
-> Le concept de construction par réutilisation et amélioration par l'utilisation de la notion d'héritage

OBJECTS (ATTRIBUTS ET METHODE ) CONCRETEMENT UN OBJECT EST UNE STRUCTURE DE DONNÉS VALUÉES ET CACHÉS QUI REPONDS A UN ENSEMBLE DE MESSAGES

L'ENCAPSULATION C'EST LE FAIR DE RÉUNIR A L'INTERIEUR D'UNE MEME ENTITÉ (OBJRTS) LE CODE (METHODE) DONNES (CHAMPS)
IL A DEUX NIVEAU PUBLIC ET PRIVER

LES CLASSSE

Les CLASSE SONT CREER PAR LE MOT CLEFS CLASS
LA DÉCLARATION D'UNE CLASS DEFINIR UN NOUVEAU TYPES QUI REGROUPE A LA FOIS LES FONCTIONS ET LES DONNÉS . C'EST A DIRE
UNE CLASSE EST UNE ABSTRACTON LOGIQUE TANDISQUE Q'UN OBJECT EST UNE INSTANCE DE CLASS DONC QUI A UNE EXISTANCE PHYSIQUE
LA DCLA D'UNE CLASS EST SIMMILAIRE A CELLE D'UNE STRUC AVEC LA DIFFERENCE QUE DANS UNE CLASS LES METHODES ET LES ATTRIBUTS SONT PRIVES SI ON NE PRECISE PAS DE SPECIFICATEURS D'ACCES
LES SPECIFICATEURS D'ACCES SONT LES MOT RESERVÉ NOTAMENT PRIVATE PUBLIC PROTECTED
SI LES DONNES DUNE CLASSE SONT PRIVES SEULS LES FONCTIONS DE LA CLASS ONT ACCES A CES DONNÉS ET AUCUNE AUTRE PARTIES DU PROGRAMME NE
PEUT FAIRE USAGE DE CES FONCTIONS ET DONNES
SI LES DONNES D'UNE D'UNE CLASS SONT PRIVES ET LES FONCTIONS SONT PUBLICS SEUL LES FONCTIONS DE LA CLASSE PEUT
FAIRE USAGES DE CES DONNÉ ET D'AUTRES PARTIES DU PROGRAMMES PEUT EN FAIRE USAGE PAR LE BIARE DES FONCTIONS PUBLICS




LES OBJETS ET LE CONSTRUCTEUR

UN OBJECT EST UNE INSTANCE D'UNE CLASS
UN OBJETC A UNE EXISTANCE PHYSIQUE TANDISQU'UNE CLASS EST ABSTRAITE L'EXISTANCE PHYSIQUE DE CET OBJECT CE FAIT PAR LE
BIAIS DU CONSTRUCTEUR  QUI EST AUSSI UNE FONCTION MAIS PAS COMME LES AUTRES EN EFFET LE CONSTRUCTEUR N'A PAS DE TYPE RETOUR , IL DOIT PORTER LE
MEME NOM QUE LA CLASS , IL PEUT SE PRESENTER SOUS PLUSIEURS FORM SANS PARAMETRE AVEC PARAMETRE OU AVEC PARAMETRE PAR DEFAUT

LE PROGRAMMEUR N'EST PAS TENIR DE CREER LE CONSTRUCTEUR DANS UNE CLASS IL EN EXISTE TOUJOUR UN PAR DEFAUT QUE LE COMPILATEUR PREVOIR

POURQUOI UN CONSTRUCTEUR

LES DONNES MEMBRES D'UNE CLASSE NE PEUVENT PS ETRE INITIALISÉE   A L'INSTANCIATION DE L'OBJECT IL FAUT DONC PREVOIR UNE METHODE D'INITIALISATION DES
DONNÉES QUI SERA INVOQUÉ LORS DE LA CREATION DE LOBJECT EN MEMOIR

QUE RISQUE TON A NE PAS EN AVOIR (? LES CONSTRUCTEURS )

SI L'ON OUBLIE D'APPELER CETTE FONCTION D'INITIALISATION , LE RESTE N'A PLUS DE SENCE ET IL SE PRODUIRA DES SUPPRISES
 FACHEUSE À L'EXÉCUTION . IL EST ALORS NÉCCESSAIRE D'ECRIRE UN OU PLUSISEURS CONSTRUCTEUR AFIN DE PERMETTRR UN
  INITIALISATION CORRECTE DE L'OBJECT

  Les METHODES ET LES ATTRIBUTS
  LES FONCTIONS D'UNE CLASSE SONT APPELERS LES METHODES ... le CONSTRUCTEUREST DONC UNE METHODDE QUI NA PAS DE RETURN
  LA DEFINITION D'UNE METHODE SE FAIT À LAIDE DE LOPERATEUR DE RESOLUTION PROPRE AU LANGUAGE C++ :: et ce lire ::
  il s'utilise dans plusieur context
  DANS LE CAS PRESENT LA SYNTAXE LORSQU'ON FAIT REFERENCE PAR RAPPORT A UNE METHODE DE CETTE  CLASS PAR LA DEFINITION DE LA METHODE EST :


  TYPE NOM_DE_CLASS :: NOM_METHODES (Parametre-formel- methodes){
      ---------
      -----------
      ----------

  }

  OUTYPEE CONSTITUE LE TYPE RESTITUER PAR LA METHODE , NOM CLASS EST LE NOM DE LA CLASS nom_methode qui est le nom de la mathode que l'on est entrain de d'ecrire
  Parametre formels methode dezsigne la liste formels des parametres de la methode

  ecrire un PROGRAM qui calcule et affiche le perimetre et laire de lobject rectangle il faut un constructeur
  rectangle et une methode afficher c'est un constructeur sans parametre

TECNIQUE DE L'HERITAGES

ENCORD APPELER DÉRIVATION PERMET DE DEFINIR UNE NOUVELLE CLASS EN CE BASANT SUR UNE CLASS DÉJA EXISTANCE NOMMÉ CLASS DE BASE
LE CONCEPT DE L'HERIAGE CONSTITUE L'UN DES FONDEMENTS DE LA PROGRAMMATION OBJECT ORIENTER .
LA CLASS DE BASE À PARTIR DE LAQUEL ON HERITE EST AUSSI APPELER CLASS MERE
SYNTAXE :
    CLASS B : PUBLIC OU PRIVATE OU PROTECTED CLASS A {

    }


la classe deriveé  HERITE LES FONCTIONNALITÉS DES CLASSES DE BASES ET PEUT AVOIR DES FONCTIONNALITÉS
ADDITIONELLES

MODE D'ACCES A LA CLASS DE BASE
    LES MEMBRES PRIVÉES D'UNE CLASS DE BASE NE SONT JAMAIS ACCESSIBLE AU FONCTIONS MEMBRES DE LA CLASS DERIVER OUTRE LES STATUS PUBLIC OU PRIVER
    IL EXISTE UN STATUS PROTEGER
    UN MEMBRE PROTERGER SE COMPORTE COMME UN MEMBRE PRIVÉ OU UN UTILISATEUR QUELQUON DE LA CLASSE
    MAIS COMME UN MEMBRE PUBLIC POUR LA CLASS DERIVER
    IL EXISTE ALORS TROIS TYPES DE DERIVATIONS
    PUBLIC : DANS CE CAS LES MEMBRES DE LA CLASS DE BASE CONSERVE LEURS STATUS DANS LA CLASS DERIVER,
     PRIVER  : DANS CE CAS TOUS LES MEMBRES DE LA CLASS DE BASES DEVIENNEENT PRIVER DANS LA
     CLASS DERIVER
     PROTECTED :  DANS CE CAS LES MEMBRES PUBLICS DE LA CLASS DE BASE DEVIENNE MEMBRE PROTEGER DE LA CLASS DERIVER

HERITAGE MULTIPLES

     IN C++ PROGRAMMING LANGUAGE NOT ONLY YOU CANT DERIVE A CLASS FROM THE BASE CLASS

     SYNTAXE :

        CLASS A {
            //CODE
        };
        CLASS B : PUBLIC CLASS A {
            //CODE
        };
        CLASS E : PUBLIC CLASS B {
            //CODE
        }


 Le NOM POLYMORPHYSE VIENT DU GREQUE ET SIGINIFIE QUI PEUT PRENDRE PLUSIEURS FORME CES CARACTÉRISTIQUES EST UN DES CONCEPTS ESSENTIEL DE LA PROGRAMMATION ORIENTER OBJECT
 ALORS QUE L'HERITAGE CONCERNE DES CLASS , LE POLYMORPHISE EST RELATIFS AU METHODE DES OBJECTS . ON DISTINQUE ALORS TROIS TYPES DE POLYMORPHISES
  --> LE POLIMORPHISE ADOQUE (FONCTION SURCHARGE OU OBALOADING EN ANGLAIS )
  --> LE POLIMORPHISE D'HERITAGE
  --> LE POLIMORPHISE PARAMETRIQUE

  -->> LE POLYMORPHISE ADOQUE :: ÇA PERMET D'AVOIR DES FONCTIONS DE MEME NOMS AVEC DES FONCTIONNALITÉS SIMMILAIRES .
  EN C++ DEUX FONCTIONS PEUVENT AVOIR LE MEME NOMS SI LE NOMBRRE ET OU DE TYPE D'ARGUMENT EST DIFFERENT
  EXEMPLE :: -->
        INT TEST();
        DOUBLE TEST(DOUBLE A );
        FLOAT TEST(INT, FLOAT);

  -->>  LE POLIMORPHISE D'HERIAGE :: LA POSSIBILITÉ DE REDEFINIR  UNE METHODE DANS DES CLASSES HERITANT D'UNE CLASS DE BASES S'APPEL LA SPÉCIALITÉ

    EN CPP UNE CLASS PEUT ETRE DERIVER D'UN OU DE PLUSIEUR PARENTS

  -->> LE POLIMORPHISE PARAMETRIQUE APPELER GENERITER OU TEMPLATE EN ANGLAIS REPRESENTE LA POSSIBILITER DE DEFINIR PLUSIEUR FONCTION DE MEME
  NOM MAIS POSSEDANT DES PARAMETRE DIFFERENT . le POLIMORPHISE PARAMETRIQUE RENDS AINSI POSSIBLE LE CHOIX AUTOMATIQUE DE LA BONNE METHODDEA ADOPTER
  EN FONCTION DU TYPE DE DONNÉE PASSER EN PARAMETTRE . AINSI ON PEUT PAR EXEMPLE DEFINIR PLUSIEUR METHODE AUMONIME
  ADDITION() : PAR EXEMPLE EFFECTUONS LA SOMME DE VALEUR

  LAFONCTION TEMPLATE FONCTIONNE DE LA MEME MANIERE QUE LES FONCTIONS NOMAUX AVEC UNE PETITE DIFFERENCE

  UNE FONCTION UNIQUE TEMPLATE PEUT FONCTIONNER AVEC PLUSIEURS TYPES DE DONNÉE AU MEME MOMENT ALORS UNE SIMPLE FONCTION NORMALE NE PEUT FONCTION QU'AVEC UN ET UN SEUL TYPE DE DONNER
  DECLARATION D'UNE FONCTION TEMPLATE :: UNE FONCTION TEMPLATE COMMENCE PAR LE MOT CLEE TEMPLATE ACCOMPAGNER DES PARAMETTRE DU TEMPLATE A L'INTERRIEUR DES SYMBOLES DE
  L'INFERIORITER ET DE SUPPERIORITER ET QUI EST ACCOMPAYER PAR LA DÉCLARATION DE LA FONCTION  :::

  TEMPLATE < CLASS T >
  T quelque fonction(){
      ------
      ------
      ------
  }

  iCI T EST L'ARGUMENT DU TEMPLATE QUI ACCEPTE LES DONNÉES COMME

  LES CLASS ET LES OBJECTS EN JAVA

  JAVA EST UN LANGUAGE PUREMENT OBJECTS
  XA TE PERMET DE DIVISER LES PROBLEMEES LES PLUS COMPLEXES EN DE PETITS PROBLEMES TOUS EN CRÉANT DES object
  CECI EST ELEBARORER SUR DEUX CARACTÉRISTIQUES :
  L'ETAT ET LE COMPORTEMENT

  LES CLASSE EN JAVA ::
  AVANT DE CREER UN OBJECTS EN JAVA IL FAUDRAIT DÉJA CREER UNE CLASS
  COURAMMENT DEFINIR LES CLASS
  cLASS NOM_DE_CLASS{
    ------
    ------
  }
  EXEMPLE :: 
        CLASS LAMPE{
            PRIVATE BOOLEAN ESTALLUMER;
            PUBLIC VOID ALUMMER(){
                ESTALLUMER = TRUE;
            }
            PUBLIC VOID ETEINDRE(){
                ESTALLUMER = FALSE;
            }
        }

LA CLASSE A UNE VARIABLES D'INSTANCIATION  ET DEUX METHODDE ALUMER ET ETEINDRE

LES OBJECTS EN JAVA

POUR ACCEDER AU MEMBRES DEFINIR DANS UNE CLASSE L'ON DOIT CREER DES OBJECT 


